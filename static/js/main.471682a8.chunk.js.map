{"version":3,"sources":["canvas.jsx","firebase.jsx","App.js","serviceWorker.js","index.js"],"names":["Canvas","distance","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","clearRect","width","height","beginPath","fillStyle","rect","fill","ref","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","App","useState","setDistance","database","on","snapshot","value","val","toFixed","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PA+BeA,G,MA5BA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEVC,EAAYC,iBAAO,MAuBzB,OAnBAC,qBAAU,WAER,IAAMC,EAASH,EAAUI,QAEnBC,EAAMF,EAAOG,WAAW,MAE9BD,EAAIE,UAAU,EAAG,EAAGJ,EAAOK,MAAOL,EAAOM,QAGzCJ,EAAIK,YAIJL,EAAIM,UAAY,UAEhBN,EAAIO,KAAK,GAAI,IAAK,IAJD,IAIOb,GACxBM,EAAIQ,SACH,CAACd,IAEG,4BAAQe,IAAKd,EAAWQ,MAAO,IAAKC,OAAQ,Q,gBCdrDM,IAASC,cAPM,CACbC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,iBAKEL,QAAf,ECgBeM,EA3BH,WAAM,MAEgBC,mBAAS,GAFzB,mBAETvB,EAFS,KAECwB,EAFD,KAchB,OATArB,qBAAU,WACSa,EAASS,WAAWV,IAAI,YAChCW,GAAG,SAAS,SAAAC,GACnB,IAAIC,EAAQD,EAASE,MAErBL,EAAYI,EAAME,QAAQ,SAE3B,IAGD,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,UAEb,kBAAC,EAAD,CAAQ/B,SAAUA,KAEpB,yBAAK+B,UAAU,gBACb,8BAAO/B,EAAP,SCdYgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.471682a8.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\n\r\n// The Canvas custom component receives the distance value from it's parent component\r\nconst Canvas = ({ distance }) => {\r\n  // Reference the canvas HTML5 object\r\n  const canvasRef = useRef(null);\r\n\r\n  // Use effect trigers a function every time it's depencies (speficied on []) changes,\r\n  // In this case, when distance changes, useEffects triggers the function to draw on screen\r\n  useEffect(() => {\r\n    // Getting the canvas referece declared above\r\n    const canvas = canvasRef.current;\r\n    // ctx (context) will be the variable to create 2d graphics on the canvas element\r\n    const ctx = canvas.getContext(\"2d\");\r\n    // Clears any previus drawing on the canvas as the drawing will be recurrent\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Creates a drawing start point\r\n    ctx.beginPath();\r\n    // Starting at 10 all the way to 170, there are 160px to fill the maximum distance which is set to 200cm\r\n    let multiplier = 160 / 200;\r\n    //Setting a blueish color to draw\r\n    ctx.fillStyle = \"#6464ff\";\r\n    //Setting the position and drawing\r\n    ctx.rect(10, 170, 120, -distance * multiplier);\r\n    ctx.fill();\r\n  }, [distance]);\r\n\r\n  return <canvas ref={canvasRef} width={140} height={180} />;\r\n};\r\n\r\nexport default Canvas;","// Import the firebase package downloaded to this project folder through npm\r\nimport firebase from \"firebase\";\r\n\r\n// Define a variable of the project name, which is used in the config parameters for firebase\r\nconst firebaseProjectName = \"server-57b2d\"\r\n\r\n// Parameters required by the initializeApp used below\r\nconst config = {\r\n  apiKey: \"AIzaSyBOTd5BkIxontH8qJNoGnyZHP53eC48jaE\",\r\n  authDomain: 'server-57b2d.firebaseapp.com',\r\n  databaseURL: 'https://server-57b2d.firebaseio.com',\r\n  projectId: 'server-57b2d'\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport Canvas from \"./canvas\";\nimport firebase from \"./firebase\";\n\nconst App = () => {\n  // Define the state of the component\n  const [distance, setDistance] = useState(0);\n\n  // Listen to changes on the firebase database, specifically the \"distance\" entry\n  useEffect(() => {\n    const getValue = firebase.database().ref(\"distance\");\n    getValue.on(\"value\", snapshot => {\n      let value = snapshot.val();\n      // Whenever the value changes on the server, it is also reset on the running app through the variable\n      setDistance(value.toFixed(2));\n    });\n  }, []);\n\n  return (\n    <div className=\"litreDisplay\">\n      <div className=\"canvas\">\n        {/* The variable is passed down to the Canvas component, which will re-render every time its altered*/} \n        <Canvas distance={distance} />\n      </div>\n      <div className=\"displayValue\">\n        <span>{distance}cm</span>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}